CGI programs can be written in virtually any programming language that can read from standard input, write to standard output, and access environment variables, 
though Perl and C/C++ are historically popular choices. Other common languages for CGI include Python, PHP, Ruby, and various shell scripts like Bash. 

How CGI Works
CGI isn't a language but a standard interface that allows web servers to execute external programs (scripts) to generate dynamic content. 
The web server passes information to the CGI program via environment variables and standard input, and the program sends its response back to 
the web server on standard output. 
=========================================================================================
CGI vs Web App
a CGI (Common Gateway Interface) program is not simply another name for a web app. CGI is a specific, older technology for running external programs on 
a web server to create dynamic content. In contrast, a web app is a broader, modern concept that refers to a full application accessed via a web browser. 
----------------------------
What is a CGI program?
The technology: CGI is a standard that allows a web server to communicate with an external executable program (called a CGI script or program).

How it works: When a user's browser makes a request for a CGI program, the web server launches a new process for that program. 
The server passes user data to the script through standard input and environment variables. The script then generates dynamic content, like an HTML page, 
and passes it back to the server, which sends it to the user.

Limitations: A new process is created for every single request, which can be slow and resource-intensive, making it a poor choice for high-traffic sites. 
----------------------------
What is a web app?
The technology: A web application is an application that runs on a server and is accessed by users through a web browser. 
The term encompasses a wide range of architectures and technologies that have evolved far beyond the original CGI standard.

How it works: Modern web apps use more sophisticated architectures to overcome the limitations of CGI. 
Technologies like Java servlets, Node.js, Python frameworks (like Django and Flask), and PHP (via integrated modules) all provide more efficient ways 
to handle web requests. These newer methods can handle many requests within a single, persistent process, rather than creating a new process for each one.

Key components:
Frontend (client-side): User interface elements built with HTML, CSS, and JavaScript, which run in the user's browser.
Backend (server-side): The application logic that processes requests, interacts with databases, and generates responses.
Database: Stores data needed for the application. 

----------------------------
Summary of differences
Aspect 	           CGI Program	                                                       
Concept	           A specific technology and protocol for executing server-side programs.	       
Architecture	   Spawns a new process for every request, which is inefficient for high traffic.	
Performance	       Can be slow and resource-intensive due to the overhead of starting a new process for each request.	
Complexity	       Relatively simple, with the server managing input/output for a console-based program.	
Timeline	       A foundational, older technology from the early days of the web (early 1990s).	

Aspect 	           Modern Web App
Concept	           A broad category of software applications accessed via a web browser.
Architecture	   Spawns a new process for every request, which is inefficient for high traffic.	Uses more advanced frameworks that can handle many requests with a single, persistent process.
Performance	       Can be slow and resource-intensive due to the overhead of starting a new process for each request.	Generally faster and more scalable due to persistent processes and optimized application servers.
Complexity	       Relatively simple, with the server managing input/output for a console-based program.	Highly complex, involving multiple layers (presentation, logic, data) and often integrating various external services.
Timeline	       A foundational, older technology from the early days of the web (early 1990s).	The standard approach for developing interactive applications on the internet today.


=========================================================================================
To use a Perl script as a CGI (Common Gateway Interface) program, follow these steps:
1. Shebang Line: Begin the Perl script with a shebang line that specifies the path to the Perl interpreter on your server. For example:
    #!/usr/bin/perl

(Adjust the path if your Perl interpreter is located elsewhere.)

2. CGI Module (Optional but Recommended): Use the CGI module to simplify handling HTTP requests and generating responses.

    use CGI;
    my $q = CGI->new;

3. Content-Type Header: The script must output a Content-type header followed by two newline characters before any other output. This tells the web server what type of content the script is sending to the browser.

    print $q->header('text/html');

Or, without the CGI module:

    print "Content-type: text/html\n\n";

4. HTML Output: Generate the desired HTML content that will be sent to the user's browser.

    print "<html><head><title>My CGI Script</title></head><body>\n";
    print "<h1>Hello from Perl CGI!</h1>\n";
    print "</body></html>\n";

5. Permissions: Ensure the Perl script has executable permissions on the web server. Typically, this means setting permissions to 755.

    chmod 755 your_script.pl

6. CGI-BIN Directory: Place the script in a directory configured for CGI execution, often named cgi-bin, which is typically located within the web server's document root.

7. Web Server Configuration: Configure your web server (e.g., Apache) to recognize and execute Perl scripts in the designated CGI directory. This usually involves directives like ScriptAlias and Options +ExecCGI in the server's configuration file.

------------------------------------------------------------------------------
Example Perl CGI Script:

#!/usr/bin/perl

use CGI;
use strict;
use warnings;

my $q = CGI->new;

print $q->header('text/html');

my $name = $q->param('name') || 'Guest'; # Get 'name' parameter, default to 'Guest'

print <<HTML;
<html>
<head>
    <title>Perl CGI Example</title>
</head>
<body>
    <h1>Hello, $name!</h1>
    <form method="get" action="\$0">
        Enter your name: <input type="text" name="name">
        <input type="submit" value="Submit">
    </form>
</body>
</html>
HTML
----------------------------
private variable:
In Perl, "my" is a keyword used to declare lexically scoped variables. Here's what it means:

Basic Definition:
my creates a private variable that only exists within the current scope (block, subroutine, or file).

Why Use my?
Prevents variable pollution - variables don't accidentally interfere with each other
Memory management - variables are automatically cleaned up when out of scope
Best practice - makes code more maintainable and predictable

Each of these variables only exists within the current subroutine and won't conflict with variables of the same name elsewhere in the code.

You can declare a variable with my and assign a value to it later. Here are the different ways to do this:

Method 1: Declare then assign (what you asked about)
my $q;           # Declare $q (it's undefined at this point)
$q = "hello";    # Assign value later

Method 2: Declare and assign in one line
my $q = "hello"; # Declare and assign together

Method 3: Declare multiple, assign individually
my ($x, $y, $z);  # Declare multiple variables
$x = "hello";
$y = "world";
$z = 123;
------------------------------
global scope variable:
variables without my could be accessed across the entire application: Without my, Perl variables have global scope and can cross functions and even files.  

Best Practice:
Always use my unless you specifically need global access. It prevents:

Accidental variable conflicts
Hard-to-debug issues
Memory leaks
Security vulnerabilities
Global variables make code harder to maintain and can create unexpected side effects across your application.

Why This Can Be Dangerous:
$count = 0;  # Global

sub increment {
    $count++;  # Modifies global
}

sub reset {
    $count = 0;  # Also modifies global
}

sub some_other_function {
    $count = "oops";  # Accidentally breaks everything!
}

