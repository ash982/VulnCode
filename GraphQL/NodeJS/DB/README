2. Database Integration
2.1 MongoDB example using Mongoose: book.js

npm install mongoose
Update resolvers to use MongoDB: resolvers-with-db.js

2.2 Neo4j
2.2.1. Install Required Packages
npm install neo4j-driver neo4j-graphql-js

2.2.2. Configure Neo4j Connection: neo4j-config.js

2.2.3. Define Neo4j GraphQL Schema: neo4j-schema.js

2.2.4. Set Up Neo4j Resolvers: neo4j-resolvers.js


2.3 MySQL
2.3.1. Install Required Packages
npm install mysql2 sequelize

2.3.2. Configure MySQL Connection: mysql-config.js

2.3.3. Define MySQL Models: book.js, author.js

2.3.4. Set Up Associations: associations.js

2.3.5. Define MySQL GraphQL Schema: mysql-schema.js

2.3.6. Create MySQL Resolvers: mysql-resolvers.js

3. Combining Both Databases in a Single GraphQL Server
3.1. Merge Schemas and Resolvers: index.js

3.2. Set Up the Combined Server: server.js

3.3. Example Queries
Query Neo4j Data:
query {
  personByName(name: "Tom") {
    name
    born
    acted_in {
      title
      released
    }
  }
}

Query MySQL Data:
query {
  authors {
    id
    name
    books {
      title
      publishedYear
    }
  }
}

4. Cross-Database Relationships (Advanced)
For cases where you need relationships between entities in different databases, you'll need to implement custom resolvers that fetch related data. For example:
cross-db-resolvers.js

5. Environment Variables and Configuration
Create a .env file for configuration:

# Neo4j Configuration
NEO4J_URI=bolt://localhost:7687
NEO4J_USER=neo4j
NEO4J_PASSWORD=your_password

# MySQL Configuration
MYSQL_HOST=localhost
MYSQL_DATABASE=your_database
MYSQL_USER=your_user
MYSQL_PASSWORD=your_password

Use dotenv to load these variables:
npm install dotenv

index.js: 
require('dotenv').config();






