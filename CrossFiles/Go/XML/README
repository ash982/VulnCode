Go XML Injection
references: 
https://owasp.org/www-chapter-vancouver/assets/presentations/2020-08_Golang_XXE.pdf
https://gnome.pages.gitlab.gnome.org/libxml2/html/parser_8h.html

Summary: 
Go standard encoding/xml parser is not vulnerable to entity injection (block & for entity reference), but entity injection is still possible when using popular package libxml for advanced xml parsing. 

1. Golang Standard/Native XML parser
Ideal for lightweight XML processing. By default, XXE is blocked.
Go's Protection Against Entity Injection
Go's encoding/xml package has built-in protections against entity injection attacks, regardless of the Strict setting:

External entities are disabled by default: Go's XML parser doesn't resolve external entities by default
Custom entity handling: The decoder.Entity map controls how entities are processed

1.1 xml.Unmarshal
Usage Scenario
simple cases where the entire XML content is readily available in memory and security concerns are minimal
-------------------------------
1.2 xml.NewDecoder
Usage Scenario
handling large XML files, streaming data, or when security is paramount, as it allows for more control over the parsing process and resource management.
Go's encoding/xml package has built-in protections against entity injection attacks, regardless of the Strict setting:

External entities are disabled by default: Go's XML parser doesn't resolve external entities by default (Error: XML syntax error on line 5: invalid character entity &xxe;)
Custom entity handling: The decoder.Entity map controls how entities are processed

=========================================
2. 3rd party parser
Best for most use cases where performance and ease of use are important.
Go Wrapper Libraries, libxml2 is a widely-used library in C for parsing XML documents

Dangerous, enable entity parsing: XMLParseNoEnt

go get github.com/lestrrat-go/libxml2
go run libxml2_gowrapper_xxe.go

=========================================
3. Use CGO for Direct Interaction
For advanced use cases, you can use CGO to directly interact with the libxml2 library. This requires writing C bindings in your Go code, but it provides full access to all features of libxml2.
Use only if you need direct and advanced access to libxml2 APIs.

Dangerous, enable entity parsing: XML_PARSE_NOENT

=========================================
